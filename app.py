import streamlit as st
import pandas as pd
import os
from dotenv import load_dotenv
from openai import OpenAI
from fpdf import FPDF
import re
import fitz  # PyMuPDF
from typing import Dict, List, Optional, Tuple
import logging
import tempfile
import shutil
import requests
from bs4 import BeautifulSoup
from datetime import datetime

# Configuraci√≥n inicial
st.set_page_config(
    page_title="GEOTEC - Sistema Experto de Estabilizaci√≥n de Suelos",
    layout="wide",
    page_icon="üåç",
    initial_sidebar_state="expanded"
)

# Configuraci√≥n de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Cargar variables de entorno
load_dotenv()

# Constantes
MAX_TOKENS = 4000
TEMP_DIR = "temp_reports"
os.makedirs(TEMP_DIR, exist_ok=True)
NORMATIVES_DIR = "normas"
ARTICLES_DIR = "articulos"

# Tipos de suelos completos seg√∫n USCS
SOIL_TYPES = [
    "Arcilla (CH)", "Arcilla limosa (CL)", "Arcilla org√°nica (OH)",
    "Limo (ML)", "Limo org√°nico (OL)", "Arena (SP)", "Arena limosa (SM)",
    "Arena arcillosa (SC)", "Grava (GP)", "Grava limosa (GM)", 
    "Grava arcillosa (GC)", "Suelo org√°nico (Pt)", "Turba (Pt)",
    "Loess", "Laterita", "Bentonita", "Margas", "Arcillas expansivas",
    "Suelos colapsables", "Suelos residuales", "Suelos aluviales"
]

# Configuraci√≥n de b√∫squeda acad√©mica
SEARCH_ENGINES = {
    "Google Scholar": "https://scholar.google.com/scholar?q=",
    "ScienceDirect": "https://www.sciencedirect.com/search?qs=",
    "ResearchGate": "https://www.researchgate.net/search?q=",
    "SpringerLink": "https://link.springer.com/search?query=",
    "ASCE Library": "https://ascelibrary.org/action/doSearch?AllField="
}

class PDFReport(FPDF):
    def __init__(self):
        super().__init__()
        self.set_auto_page_break(auto=True, margin=15)
        self.set_margins(15, 15, 15)
        
    def header(self):
        self.set_font('Arial', 'B', 12)
        self.cell(0, 10, 'Informe T√©cnico de Estabilizaci√≥n de Suelos', 0, 1, 'C')
        self.ln(5)
    
    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, f'P√°gina {self.page_no()}', 0, 0, 'C')
    
    def add_section(self, title, content):
        self.set_font('Arial', 'B', 12)
        self.cell(0, 8, title, 0, 1)
        self.set_font('Arial', '', 11)
        self.multi_cell(0, 5, content)
        self.ln(5)

def load_documents(folder: str) -> Dict[str, str]:
    """Carga documentos PDF desde una carpeta"""
    documents = {}
    if not os.path.exists(folder):
        logger.warning(f"Carpeta {folder} no encontrada")
        return documents
    
    for file in os.listdir(folder):
        if file.lower().endswith(".pdf"):
            try:
                with fitz.open(os.path.join(folder, file)) as doc:
                    text = ""
                    for page in doc:
                        text += page.get_text()
                    documents[file] = text[:5000]  # Limitar a 5000 caracteres
            except Exception as e:
                logger.error(f"Error leyendo {file}: {str(e)}")
    return documents

def search_academic_references(query: str) -> List[Dict]:
    """Busca referencias acad√©micas relevantes"""
    results = []
    try:
        url = f"{SEARCH_ENGINES['Google Scholar']}{query.replace(' ', '+')}"
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        }
        
        response = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        for item in soup.select(".gs_ri")[:5]:  # Aumentamos a 5 resultados
            title = item.select_one(".gs_rt").get_text()
            authors_source = item.select_one(".gs_a").get_text()
            snippet = item.select_one(".gs_rs").get_text()
            link = item.select_one(".gs_rt a")["href"] if item.select_one(".gs_rt a") else None
            
            parts = authors_source.split(" - ")
            authors = parts[0] if len(parts) > 0 else "Desconocido"
            source = parts[1] if len(parts) > 1 else "Desconocido"
            year = re.search(r"\b(19|20)\d{2}\b", authors_source)
            year = year.group() if year else "Desconocido"
            
            results.append({
                "title": title,
                "authors": authors,
                "source": source,
                "year": year,
                "snippet": snippet,
                "url": link,
                "engine": "Google Scholar"
            })
    
    except Exception as e:
        logger.error(f"Error en b√∫squeda acad√©mica: {str(e)}")
    
    return results

def validate_soil_parameters(data: pd.Series) -> Optional[str]:
    """Valida la coherencia de los par√°metros del suelo"""
    errors = []
    
    # Validaci√≥n de l√≠mites de Atterberg
    if data['L√≠mite l√≠quido (LL)'] < data['L√≠mite pl√°stico (LP)']:
        errors.append("El l√≠mite l√≠quido (LL) no puede ser menor que el l√≠mite pl√°stico (LP)")
    
    if data['√çndice de plasticidad (IP)'] != (data['L√≠mite l√≠quido (LL)'] - data['L√≠mite pl√°stico (LP)']):
        errors.append("El √≠ndice de plasticidad (IP) debe ser igual a LL - LP")
    
    # Validaci√≥n de niveles fre√°ticos
    if data['Nivel fre√°tico (m)'] < 0:
        errors.append("El nivel fre√°tico no puede ser negativo")
    
    # Validaci√≥n de presi√≥n de carga
    if data['Presi√≥n de carga (kPa)'] < 0:
        errors.append("La presi√≥n de carga no puede ser negativa")
    
    if errors:
        return "\n".join(f"- {error}" for error in errors)
    return None

def data_input_interface() -> Tuple[Optional[pd.DataFrame], str]:
    """Interfaz de entrada de datos mejorada"""
    with st.form("soil_data_form"):
        st.header("Datos del Suelo y Proyecto")
        
        col1, col2 = st.columns(2)
        
        with col1:
            soil_type = st.selectbox(
                "Tipo de suelo",
                SOIL_TYPES,
                help="Seleccione seg√∫n clasificaci√≥n USCS"
            )
            water_level = st.number_input(
                "Nivel fre√°tico (metros)", 
                min_value=0.0,
                value=1.5,
                step=0.1,
                format="%.1f"
            )
            
        with col2:
            load_pressure = st.number_input(
                "Presi√≥n de carga (kPa)", 
                min_value=0,
                value=150,
                step=10
            )
            desired_strength = st.number_input(
                "Resistencia deseada (kPa)", 
                min_value=0,
                value=200
            )
        
        st.subheader("Propiedades del Suelo")
        ll_col, lp_col, ip_col = st.columns(3)
        with ll_col:
            ll = st.number_input("L√≠mite l√≠quido (LL)", min_value=0, value=30)
        with lp_col:
            lp = st.number_input("L√≠mite pl√°stico (LP)", min_value=0, value=15)
        with ip_col:
            ip = st.number_input("√çndice plasticidad (IP)", min_value=0, value=15)
        
        additional_info = st.text_area(
            "Informaci√≥n adicional del proyecto:",
            height=100,
            placeholder="Descripci√≥n del proyecto, condiciones especiales, restricciones..."
        )
        
        if st.form_submit_button("Analizar y Recomendar"):
            data = {
                "Tipo de suelo": soil_type,
                "Nivel fre√°tico (m)": water_level,
                "Presi√≥n de carga (kPa)": load_pressure,
                "Resistencia deseada (kPa)": desired_strength,
                "L√≠mite l√≠quido (LL)": ll,
                "L√≠mite pl√°stico (LP)": lp,
                "√çndice de plasticidad (IP)": ip
            }
            
            # Validar par√°metros
            validation_error = validate_soil_parameters(pd.Series(data))
            if validation_error:
                st.error(f"Error en los par√°metros ingresados:\n{validation_error}")
                return None, ""
            
            return pd.DataFrame([data]), additional_info
    
    return None, ""

def generate_technical_prompt(data: pd.Series, additional_info: str, normatives: Dict[str, str], articles: Dict[str, str]) -> str:
    """Genera un prompt t√©cnico detallado con contexto de normativas y art√≠culos"""
    # B√∫squeda de referencias acad√©micas espec√≠ficas
    search_queries = [
        f"estabilizaci√≥n de {data['Tipo de suelo']} nivel fre√°tico {data['Nivel fre√°tico (m)']}m",
        f"{data['Tipo de suelo']} presi√≥n de carga {data['Presi√≥n de carga (kPa)']}kPa",
        f"m√©todos de estabilizaci√≥n para {data['Tipo de suelo']} LL{data['L√≠mite l√≠quido (LL)']} IP{data['√çndice de plasticidad (IP)']}"
    ]
    
    academic_refs = []
    for query in search_queries:
        academic_refs.extend(search_academic_references(query))
    
    # Eliminar duplicados
    unique_refs = []
    seen_titles = set()
    for ref in academic_refs:
        if ref['title'] not in seen_titles:
            seen_titles.add(ref['title'])
            unique_refs.append(ref)
    
    # Formatear referencias acad√©micas
    refs_text = "\n".join(
        f"- {ref['authors']} ({ref['year']}). {ref['title']}. {ref['source']} [URL: {ref['url']}]"
        for ref in unique_refs[:10]  # Limitar a 10 referencias
    ) if unique_refs else "No se encontraron referencias adicionales"
    
    # Contexto de normativas
    normative_context = "\nNormativas relevantes:\n" + "\n".join(
        f"- {name}: {content[:500]}..." 
        for name, content in list(normatives.items())[:5]
    ) if normatives else "\nNo hay normativas cargadas"
    
    # Contexto de art√≠culos
    article_context = "\nArt√≠culos t√©cnicos:\n" + "\n".join(
        f"- {name}: {content[:500]}..." 
        for name, content in list(articles.items())[:5]
    ) if articles else "\nNo hay art√≠culos cargados"
    
    return f"""
    Eres un ingeniero geot√©cnico senior con 30 a√±os de experiencia en estabilizaci√≥n de suelos. 
    Realiza un an√°lisis exhaustivo para este caso espec√≠fico:

    ### Datos T√©cnicos del Suelo:
    1. Tipo de suelo: {data['Tipo de suelo']}
    2. Nivel fre√°tico: {data['Nivel fre√°tico (m)']} m
    3. Presi√≥n de carga: {data['Presi√≥n de carga (kPa)']} kPa
    4. Resistencia deseada: {data['Resistencia deseada (kPa)']} kPa
    5. L√≠mites de Atterberg:
       - L√≠mite l√≠quido (LL): {data['L√≠mite l√≠quido (LL)']}
       - L√≠mite pl√°stico (LP): {data['L√≠mite pl√°stico (LP)']}
       - √çndice de plasticidad (IP): {data['√çndice de plasticidad (IP)']}

    ### Contexto T√©cnico:
    {normative_context}
    {article_context}

    ### Referencias Acad√©micas Relevantes:
    {refs_text}

    ### Informaci√≥n Adicional del Proyecto:
    {additional_info if additional_info else 'Ninguna'}

    ### Requerimientos del An√°lisis:
    1. **Evaluaci√≥n de Par√°metros:**
       - Verifica la coherencia de los par√°metros ingresados
       - Si hay inconsistencias, explica por qu√© no se puede realizar el an√°lisis

    2. **Clasificaci√≥n Detallada:**
       - Clasifica el suelo seg√∫n USCS y AASHTO
       - Explica cada par√°metro y su implicaci√≥n

    3. **Problemas Identificados:**
       - Lista los problemas espec√≠ficos para este suelo
       - Relaciona cada problema con los par√°metros ingresados

    4. **Recomendaci√≥n de Estabilizaci√≥n:**
       - Realiza un an√°lisis exhaustivo considerando:
         * M√©todos f√≠sicos (compactaci√≥n, inclusi√≥n de geosint√©ticos)
         * M√©todos qu√≠micos (cal, cemento, pol√≠meros)
         * M√©todos innovadores (biocementaci√≥n, nanotecnolog√≠a)
       - Selecciona UN √∫nico m√©todo √≥ptimo basado en:
         * Compatibilidad exacta con el tipo de suelo
         * Comportamiento con el nivel fre√°tico espec√≠fico
         * Capacidad para la presi√≥n de carga indicada
         * Potencial para alcanzar la resistencia deseada
       - El m√©todo recomendado debe ser ESPEC√çFICO (no gen√©rico)
         Ejemplo: "Estabilizaci√≥n con cal al 5% + cemento al 3% para suelos arcillosos con alta plasticidad"

    5. **Justificaci√≥n T√©cnica Rigurosa:**
       - Explica el mecanismo de acci√≥n del m√©todo recomendado
       - Detalla materiales requeridos con especificaciones t√©cnicas
       - Describe el proceso constructivo paso a paso
       - Presenta resultados esperados cuantificables
       - Cita normativas aplicables (ASTM, AASHTO, ISO) con n√∫meros exactos
       - Referencia art√≠culos t√©cnicos que respalden la recomendaci√≥n
       - Compara con otros m√©todos descartados y explica por qu√© no son √≥ptimos

    6. **Aplicaciones Recomendadas:**
       - Proporciona 5 aplicaciones espec√≠ficas con:
         * Tipo de proyecto exacto (ej: "Cimentaci√≥n para edificio de 5 pisos")
         * Configuraci√≥n recomendada
         * Ejemplos reales documentados (si existen)
         * Justificaci√≥n t√©cnica para cada aplicaci√≥n

    ### Formato de Respuesta Estricto:
    **Evaluaci√≥n de Par√°metros:**
    [An√°lisis de coherencia de los datos ingresados]

    **Clasificaci√≥n del Suelo:**
    [Clasificaci√≥n detallada seg√∫n sistemas est√°ndar]

    **Problemas Identificados:**
    [Lista de problemas espec√≠ficos para este suelo]

    **Recomendaci√≥n √ìptima:**
    [M√©todo espec√≠fico recomendado]

    **Justificaci√≥n T√©cnica:**
    [Explicaci√≥n detallada con fundamentos t√©cnicos, normativas y referencias]

    **Aplicaciones Recomendadas:**
    1. [Proyecto espec√≠fico 1 con justificaci√≥n]
    2. [Proyecto espec√≠fico 2 con justificaci√≥n]
    3. [Proyecto espec√≠fico 3 con justificaci√≥n]
    4. [Proyecto espec√≠fico 4 con justificaci√≥n]
    5. [Proyecto espec√≠fico 5 con justificaci√≥n]
    """

def query_ai(prompt: str) -> str:
    """Consulta a la API de OpenAI con enfoque t√©cnico riguroso"""
    try:
        client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "Eres un ingeniero geot√©cnico senior con 30 a√±os de experiencia en estabilizaci√≥n de suelos. "
                        "Realiza an√°lisis t√©cnicos exhaustivos basados en evidencia cient√≠fica y normativa. "
                        "Sigue estrictamente estos requisitos:\n"
                        "1. Eval√∫a primero la coherencia de los par√°metros ingresados\n"
                        "2. Clasifica el suelo con precisi√≥n seg√∫n los est√°ndares\n"
                        "3. Identifica problemas espec√≠ficos basados en los datos\n"
                        "4. Recomienda UN √∫nico m√©todo ESPEC√çFICO despu√©s de analizar todas las opciones\n"
                        "5. Justifica con normativas exactas (ASTM, AASHTO, ISO) y art√≠culos cient√≠ficos indexados\n"
                        "6. Propone 5 aplicaciones espec√≠ficas con ejemplos reales cuando sea posible\n"
                        "S√© extremadamente preciso y t√©cnico en todas las explicaciones."
                    )
                },
                {"role": "user", "content": prompt}
            ],
            temperature=0.1,  # Baja temperatura para mayor precisi√≥n
            max_tokens=MAX_TOKENS,
            top_p=0.9  # Para mayor diversidad en las recomendaciones
        )
        
        return response.choices[0].message.content
    
    except Exception as e:
        logger.error(f"Error en consulta al modelo: {str(e)}")
        return f"Error: {str(e)}"

def parse_response(content: str) -> Dict[str, str]:
    """Parsea la respuesta en secciones estructuradas"""
    sections = {
        "parameter_evaluation": "",
        "classification": "",
        "problems": "",
        "recommendation": "",
        "justification": "",
        "applications": "",
        "norms": [],
        "references": []
    }
    
    # Extraer normativas citadas
    norms = re.findall(
        r"(ASTM [A-Z]+\s?\d+|AASHTO [A-Z]+\s?\d+|ISO \d+-\d+|EN \d+|NTC \d+)", 
        content, re.IGNORECASE
    )
    sections["norms"] = list(set(norms))
    
    # Extraer referencias bibliogr√°ficas
    ref_pattern = re.compile(
        r"(?P<authors>[A-Za-z√Å-√ø\s\.,]+(?:et al\.)?)\s*\((?P<year>\d{4})\)[^.]*\.\s*(?P<title>[^.]*?)\s*\.\s*(?P<source>[^.]*?)(?:\.|$)"
    )
    sections["references"] = [
        {
            "authors": match.group("authors").strip(),
            "year": match.group("year"),
            "title": match.group("title").strip(),
            "source": match.group("source").strip()
        }
        for match in ref_pattern.finditer(content)
    ]
    
    # Extraer secciones principales
    section_markers = {
        "parameter_evaluation": "Evaluaci√≥n de Par√°metros:",
        "classification": "Clasificaci√≥n del Suelo:",
        "problems": "Problemas Identificados:",
        "recommendation": "Recomendaci√≥n √ìptima:",
        "justification": "Justificaci√≥n T√©cnica:",
        "applications": "Aplicaciones Recomendadas:"
    }
    
    for section, marker in section_markers.items():
        if marker in content:
            end_marker = next((m for m in section_markers.values() 
                             if m != marker and content.find(m) > content.find(marker)), None)
            
            section_content = content.split(marker)[1]
            if end_marker:
                section_content = section_content.split(end_marker)[0]
            
            sections[section] = section_content.strip()
    
    return sections

def display_results(data: pd.Series, analysis: str):
    """Muestra los resultados de forma estructurada y profesional"""
    # Parsear la respuesta
    sections = parse_response(analysis)
    
    # Mostrar evaluaci√≥n de par√°metros primero
    if sections["parameter_evaluation"]:
        if "inconsistencias" in sections["parameter_evaluation"].lower() or "error" in sections["parameter_evaluation"].lower():
            st.error("Problemas con los par√°metros ingresados:")
            st.markdown(sections["parameter_evaluation"])
            return
    
    st.success("An√°lisis completado exitosamente")
    
    # Mostrar en pesta√±as
    tab1, tab2, tab3 = st.tabs(["Resumen T√©cnico", "Recomendaci√≥n Detallada", "Aplicaciones Espec√≠ficas"])
    
    with tab1:
        st.subheader("Clasificaci√≥n del Suelo")
        if sections["classification"]:
            st.markdown(sections["classification"])
        else:
            st.warning("No se pudo determinar la clasificaci√≥n del suelo")
        
        st.subheader("Problemas Identificados")
        if sections["problems"]:
            st.markdown(sections["problems"])
        else:
            st.warning("No se identificaron problemas espec√≠ficos")
    
    with tab2:
        st.subheader("M√©todo de Estabilizaci√≥n Recomendado")
        if sections["recommendation"]:
            st.markdown(sections["recommendation"], unsafe_allow_html=True)
            
            st.subheader("Justificaci√≥n T√©cnica")
            if sections["justification"]:
                st.markdown(sections["justification"], unsafe_allow_html=True)
                
                if sections["norms"]:
                    st.subheader("Normativas Aplicables")
                    for norm in sections["norms"]:
                        st.markdown(f"- {norm}")
                
                if sections["references"]:
                    st.subheader("Referencias T√©cnicas")
                    for ref in sections["references"][:5]:  # Mostrar solo las 5 principales
                        st.markdown(
                            f"**{ref['title']}**  \n"
                            f"*{ref['authors']} ({ref['year']})*  \n"
                            f"Fuente: {ref['source']}"
                        )
            else:
                st.warning("No se proporcion√≥ justificaci√≥n t√©cnica")
        else:
            st.error("No se pudo generar una recomendaci√≥n")
    
    with tab3:
        st.subheader("Aplicaciones Recomendadas")
        if sections["applications"]:
            st.markdown(sections["applications"])
        else:
            st.warning("No se especificaron aplicaciones para este m√©todo")

def generate_pdf_report(data: pd.Series, sections: Dict[str, str]) -> Optional[str]:
    """Genera un informe PDF profesional"""
    try:
        pdf = PDFReport()
        pdf.add_page()
        
        # Portada
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, 'INFORME T√âCNICO DE ESTABILIZACI√ìN DE SUELOS', 0, 1, 'C')
        pdf.ln(10)
        pdf.set_font('Arial', '', 12)
        pdf.cell(0, 10, f"Fecha: {datetime.now().strftime('%Y-%m-%d')}", 0, 1)
        pdf.ln(5)
        
        # Datos del suelo
        pdf.set_font('Arial', 'B', 14)
        pdf.cell(0, 10, '1. Datos del Suelo', 0, 1)
        pdf.set_font('Arial', '', 11)
        
        soil_data = [
            ["Par√°metro", "Valor"],
            ["Tipo de suelo", data["Tipo de suelo"]],
            ["Nivel fre√°tico", f"{data['Nivel fre√°tico (m)']} m"],
            ["Presi√≥n de carga", f"{data['Presi√≥n de carga (kPa)']} kPa"],
            ["Resistencia deseada", f"{data['Resistencia deseada (kPa)']} kPa"],
            ["L√≠mite l√≠quido (LL)", str(data["L√≠mite l√≠quido (LL)"])],
            ["L√≠mite pl√°stico (LP)", str(data["L√≠mite pl√°stico (LP)"])],
            ["√çndice de plasticidad (IP)", str(data["√çndice de plasticidad (IP)"])]
        ]
        
        col_width = pdf.w / 2.5
        for row in soil_data:
            pdf.cell(col_width, 6, row[0], border=1)
            pdf.cell(col_width, 6, row[1], border=1)
            pdf.ln()
        
        pdf.ln(10)
        
        # Evaluaci√≥n de par√°metros
        if sections["parameter_evaluation"]:
            pdf.set_font('Arial', 'B', 14)
            pdf.cell(0, 10, '2. Evaluaci√≥n de Par√°metros', 0, 1)
            pdf.set_font('Arial', '', 11)
            pdf.multi_cell(0, 5, sections["parameter_evaluation"])
            pdf.ln(5)
        
        # Clasificaci√≥n y problemas
        if sections["classification"] or sections["problems"]:
            pdf.set_font('Arial', 'B', 14)
            pdf.cell(0, 10, '3. An√°lisis T√©cnico', 0, 1)
            
            if sections["classification"]:
                pdf.add_section("Clasificaci√≥n del Suelo", sections["classification"])
            
            if sections["problems"]:
                pdf.add_section("Problemas Identificados", sections["problems"])
        
        # Recomendaci√≥n y justificaci√≥n
        if sections["recommendation"]:
            pdf.add_page()
            pdf.set_font('Arial', 'B', 14)
            pdf.cell(0, 10, '4. Recomendaci√≥n de Estabilizaci√≥n', 0, 1)
            pdf.set_font('Arial', '', 11)
            pdf.multi_cell(0, 5, sections["recommendation"])
            pdf.ln(5)
            
            if sections["justification"]:
                pdf.set_font('Arial', 'B', 14)
                pdf.cell(0, 10, '5. Justificaci√≥n T√©cnica', 0, 1)
                pdf.set_font('Arial', '', 11)
                pdf.multi_cell(0, 5, sections["justification"])
                pdf.ln(5)
                
                if sections["norms"]:
                    pdf.set_font('Arial', 'B', 12)
                    pdf.cell(0, 10, 'Normativas Aplicables:', 0, 1)
                    pdf.set_font('Arial', '', 10)
                    for norm in sections["norms"]:
                        pdf.multi_cell(0, 5, f"- {norm}")
                    pdf.ln(5)
                
                if sections["references"]:
                    pdf.set_font('Arial', 'B', 12)
                    pdf.cell(0, 10, 'Referencias T√©cnicas:', 0, 1)
                    pdf.set_font('Arial', '', 10)
                    for ref in sections["references"][:5]:  # Limitar a 5 referencias
                        pdf.multi_cell(0, 5, f"- {ref['authors']} ({ref['year']}). {ref['title']}. {ref['source']}")
                    pdf.ln(5)
        
        # Aplicaciones recomendadas
        if sections["applications"]:
            pdf.add_page()
            pdf.set_font('Arial', 'B', 14)
            pdf.cell(0, 10, '6. Aplicaciones Recomendadas', 0, 1)
            pdf.set_font('Arial', '', 11)
            pdf.multi_cell(0, 5, sections["applications"])
        
        # Guardar PDF
        temp_file = tempfile.NamedTemporaryFile(dir=TEMP_DIR, suffix=".pdf", delete=False)
        pdf_path = temp_file.name
        pdf.output(pdf_path)
        temp_file.close()
        
        return pdf_path
    
    except Exception as e:
        logger.error(f"Error generando PDF: {str(e)}")
        return None

def main():
    """Funci√≥n principal del sistema"""
    try:
        st.title("Sistema Experto de Estabilizaci√≥n de Suelos")
        st.markdown("""
        **Herramienta profesional para recomendaci√≥n de m√©todos de estabilizaci√≥n de suelos**  
        *Basado en an√°lisis t√©cnico, normativas internacionales y literatura cient√≠fica*
        """)
        
        # Verificar API key
        if not os.getenv("OPENAI_API_KEY"):
            st.error("Configure OPENAI_API_KEY en el archivo .env")
            st.stop()
        
        # Cargar documentos de referencia
        with st.spinner("Cargando base de conocimiento..."):
            normatives = load_documents(NORMATIVES_DIR)
            articles = load_documents(ARTICLES_DIR)
        
        # Interfaz de entrada de datos
        data, additional_info = data_input_interface()
        
        if data is not None:
            with st.spinner("Realizando an√°lisis t√©cnico exhaustivo..."):
                # Generar prompt t√©cnico
                prompt = generate_technical_prompt(
                    data.iloc[0], 
                    additional_info,
                    normatives,
                    articles
                )
                
                # Mostrar prompt en debug
                if st.session_state.get("debug", False):
                    with st.expander("Prompt t√©cnico generado", expanded=False):
                        st.code(prompt)
                
                # Ejecutar consulta a la API
                analysis = query_ai(prompt)
                
                # Mostrar resultados
                display_results(data.iloc[0], analysis)
                
                with st.expander("Respuesta completa de GPT-4 (debug)", expanded=True):
                    st.markdown(analysis)

                # Generar PDF
                sections = parse_response(analysis)
                pdf_path = generate_pdf_report(data.iloc[0], sections)
                
                if pdf_path:
                    with open(pdf_path, "rb") as f:
                        st.download_button(
                            "Descargar Informe Completo (PDF)",
                            data=f.read(),
                            file_name="informe_estabilizacion.pdf",
                            mime="application/pdf"
                        )
                    
                    try:
                        os.unlink(pdf_path)
                    except Exception as e:
                        logger.error(f"Error al eliminar PDF temporal: {str(e)}")
    
    except Exception as e:
        st.error(f"Error en la aplicaci√≥n: {str(e)}")
        logger.error(f"Error en main: {str(e)}", exc_info=True)
    
    finally:
        if os.path.exists(TEMP_DIR):
            try:
                shutil.rmtree(TEMP_DIR)
            except Exception as e:
                logger.error(f"Error al limpiar directorio temporal: {str(e)}")

if __name__ == "__main__":
    main()